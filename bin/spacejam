#!/usr/bin/env python3
# ________________________________________________________________________
#
#  Copyright (C) 2020 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os
import logging
import logging.handlers
import psutil
import argparse


#  Disk usage limit as percentage
#
DEF_LIMIT = 90.0


def parse_args(argv, log=None):
    p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
    Check that available space on physical disks is ok.
    Expected to be run via cron.
    """
    )

    p.add_argument('-v', '--verbose', action='store_true', help="Verbose logging")
    p.add_argument('-q', '--quiet', action='store_true', help="Quiet logging, errors and warnings only")
    p.add_argument('-e', '--log-stderr', action='store_true', help="Log to stderr, default is syslog")
    p.add_argument('-L', '--limit', action='store', type=float, metavar='percent', default=DEF_LIMIT,
                    help="Report disks with more than this percentage used, default %.0f" % DEF_LIMIT)

    args = p.parse_args()

    if args.log_stderr:
        log_handler = logging.StreamHandler()
        log_formatter = logging.Formatter(fmt="%(asctime)s %(levelname)s %(message)s")
    else:
        logparams = {}
        for addr in ['/dev/log', '/var/run/log']:
            if os.path.exists(addr):
                logparams['address'] = addr
                break
        log_handler = logging.handlers.SysLogHandler(**logparams)
        log_formatter = logging.Formatter(fmt="%(name)s[%(process)d]: %(levelname)s %(message).1000s")

    if not log:
        log = logging.getLogger()
        log_handler.setFormatter(log_formatter)
        log.addHandler(log_handler)

    if args.verbose:
        log.setLevel(logging.DEBUG)
    elif args.quiet:
        log.setLevel(logging.WARNING)
    else:
        log.setLevel(logging.INFO)

    return args, log


def check_disks(limit=None):
    selected = {}
    for disk in sorted(psutil.disk_partitions(), key=lambda x: x.mountpoint):
        usage = psutil.disk_usage(disk.mountpoint)
        if limit is None or usage.percent > limit:
            selected[disk.mountpoint] = usage.percent
    return selected


def main(argv=None, ilog=None):
    global log
    args, log = parse_args(argv, log=ilog)

    alerts = check_disks(args.limit)
    if alerts:
        width = 0
        width = max(map(len, alerts))
        print("File systems above usage limit of %.0f%% ..." % args.limit)
        for mount, used in sorted(alerts.items()):
            print("  %*s  %4.1f%%" % (width, mount, used))
        return len(alerts)
    else:
        return 0


if __name__ == '__main__':
    exit(main())
