#!/usr/bin/env python
# ________________________________________________________________________
#
#  Copyright (C) 2014 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os
import sys
import time
import json
import argparse

try:
    from http.client import HTTPConnection, HTTPSConnection
except:
    from httplib import HTTPConnection, HTTPSConnection
try:
    from urllib.parse import urlparse, urlencode
except:
    from urlparse import urlparse
    from urllib import urlencode

program = os.path.basename(os.path.splitext(sys.argv[0])[0])

def_base_url = 'https://api.ssllabs.com/api/v2/'
def_initial_secs = 150
def_retry_secs = 30
def_passing_grade = "A"
def_max_attempts = 10
def_last_assessment = os.path.join(os.environ['HOME'], program + '-last.json')

def_port = 80
def_sslport = 443


def fatal(fmt, *fargs):
    sys.stderr.write(program + ': ' + (fmt.rstrip() % fargs) + "\n")
    sys.exit(2)


def warn(fmt, *fargs):
    sys.stderr.write(program + ': ' + (fmt.rstrip() % fargs) + "\n")


def info(fmt, *fargs):
    if not args.quiet:
        sys.stderr.write(program + ': ' + (fmt.rstrip() % fargs) + "\n")


def verb(fmt, *fargs):
    if args.verbose:
        sys.stderr.write(program + ': ' + (fmt.rstrip() % fargs) + "\n")


class HttpClient(object):
    """
    Provides methods to access the taskforce http service.  These are basically
    for convenience in clients, and are particularly useful when using
    Unix domain sockets (thanks to Erik van Zijst for the nice approach --
    https://pypi.python.org/pypi/uhttplib).

    Parameters:

      base_url  - The address to connect to.
              This may be specified as "http[s]://host[:port]/path/"
              The path passed to get() will be appended to this for each call.
      timeout   - The timeout in seconds (float) for query I/O.
"""
    def __init__(self, base_url, timeout=30):
        u = urlparse(base_url)
        if not u.hostname:
            fatal("A host name is required in the base url '%s'", base_url)
        self.host = u.hostname
        if u.username or u.password:
            fatal("Authentication is not supported in base url '%s'", base_url)
        if u.query:
            fatal("The base url '%s' may not contain a query path", base_url)
        self.port = None
        if u.port:
            self.port = u.port
        if u.scheme == 'https':
            if not self.port:
                self.port = def_sslport
            self.http = HTTPSConnection(self.host, self.port, timeout=timeout)
        elif u.scheme == 'http':
            if not self.port:
                self.port = def_port
            self.http = HTTPConnection(self.host, self.port, timeout=timeout)
        else:
            fatal("Unsupported scheme '%s' in base url '%s'", u.scheme, base_url)
        self.base_path = u.path
        self.lastpath = self.base_path
        verb("HTTP connected to %s://%s:%d/", u.scheme, self.host, self.port)
        if u.scheme == 'https' and hasattr(self.http.sock, 'cipher'):
            verb("Cipher: %s", self.http.sock.cipher())

    def get(self, path, query=None):
        """
        Issue a GET request.  If specfied, "query" should be a dict of name/value
        pairs.  Names should be normal identifiers which start with an alpha
        followed by alnums or underscores.  The values are url-encoded and
        become the "query" part of the request header (ie, the part after
        the '?' in the URI).

        The result is the tuple:
            (code, content, content_type)

        If the request is unsuccessful returning code 400 or higher,
        a fatal error is returned.
    """
        try:
            self.http.connect()
        except Exception as e:
            fatal("Connection to %s:%d failed -- %s", self.host, self.port, e)
        self.lastpath = self.base_path
        if path:
            self.lastpath = self.lastpath.rstrip('/')
            self.lastpath += '/' + path
        if query is not None:
            self.lastpath += '?' + urlencode(query)
        start = time.time()
        self.http.request('GET', self.lastpath)
        resp = self.http.getresponse()
        ctype = resp.getheader('Content-Type')
        data = resp.read().decode('utf-8')
        verb("Request '%s' status %d, %s length %d, %.2f secs",
                self.lastpath, resp.status, ctype, len(data), time.time() - start)
        self.http.close()
        if resp.status < 300:
            return (resp.status, data, ctype)
        else:
            msg = data.strip()[:200]
            fatal("HTTP Error %d%s", resp.status, ' -- ' + msg if msg else '')

    def getmap(self, path, query=None):
        """
        Performs a GET request where the response content type is required to be
        "application/json" and the content is a JSON-encoded data structure.
        The decoded structure is returned.
    """
        code, data, ctype = self.get(path, query)
        t = ctype.split(';')
        if t[0].strip() != 'application/json':
            fatal("Expecting JSON from GET of '%s', got '%s'", self.lastpath, ctype)
        try:
            result = json.loads(data)
        except Exception as e:
            fatal("Could not load JSON content from GET '%s' -- %s", self.lastpath, e)
        verb("Response for '%s': %s", self.lastpath, json.dumps(result, indent=4))
        return result


def canonical_grade(grade):
    if len(grade) < 1:
        fatal("Invalid grade '%s'", grade)
    grade_letter = grade[0].upper()
    if len(grade) > 1:
        grade_sign = grade[1:]
    else:
        grade_sign = ''
    grade_ord = (ord('G') - ord(grade_letter)) * 3
    if grade_sign == '+':
        grade_ord += 1
    elif grade_sign == '-':
        grade_ord -= 1
    return grade_ord


def get_age(state):
    end_time = state.get('testTime')
    if end_time:
        end_time /= 1000.0
        return time.time() - end_time
    else:
        return None


def get_duration(state):
    start_time = state.get('startTime')
    if start_time:
        start_time /= 1000.0
    end_time = state.get('testTime')
    if end_time:
        end_time /= 1000.0
    if start_time and end_time:
        duration = end_time - start_time
        verb("Assesment for '%s' ran for %.1f secs", args.host_under_test, duration)
    elif start_time:
        duration = time.time() - start_time
        verb("Assesment for '%s' now running for %.1f secs", args.host_under_test, duration)
    else:
        duration = None
        warn("No 'startTime' in response for host '%s'", args.host_under_test)
    return duration


p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                            description="""
Initiates a server scan using the SSLlabs.com free SSL scan API.

In normal operation, this checks that the scanning site is operational, initiates
a scan, and the periodically checks until the scan is complete.  Experience shows
this typically takes about %.1f minutes, so the program will wait that long before
checking back and then will check back every %d seconds.

In "quiet" mode, if the result is at least a passing grade, the program exits
quietly.  The general idea is that you can run this from cron and only get an
email if your site has dropped below expectations.

Why the name?  I feel like I'm rereading Catch-22 every time I type "ssllabs".
http://www.cliffsnotes.com/literature/c/catch22/summary-and-analysis/chapters-1718
""" % (def_initial_secs / 60.0, def_retry_secs))

p.add_argument('-v', '--verbose', action='store_true', dest='verbose', help='Report progress.')
p.add_argument('-q', '--quiet', action='store_true', dest='quiet', help='Report only errors.')
p.add_argument('-W', '--ignore-warnings', action='store_false', dest='report_warnings',
                help="Don't fail if the SSLlabs 'hasWarnings' flag is set")
p.add_argument('-p', '--publish', action='store_true', dest='publish',
                help="""Allow SSLlabs.com to publish the assessment grade.
                    This is the polite thing to do but you may want to hold off until your grade is reasonable.""")
p.add_argument('-l', '--last-assessment', action='store', dest='last_assessment_file', default=def_last_assessment,
                help="Where to record the last assessment received.  Default is '%s', use '' to disable" % def_last_assessment)
p.add_argument('-g', '--grade', action='store', dest='passing_grade', default=def_passing_grade,
                help="""Set the passing grade.  Default is '%s' because it really isn't that hard to do.
                        It is tempting to make the default 'A+' as that isn't hard to do either,
                        but Perfect Forward Secrecy implies requiring https-only access which may
                        be overkill for some sites.""" % def_passing_grade)
p.add_argument('-f', '--force', action='store_true', dest='force', help="Force a new assessment")
p.add_argument('-P', '--probe-period', action='store', dest='probe_period', type=int,
                help="Override the default status cycle, in seconds")
p.add_argument('-m', '--max-attemtps', action='store', dest='max_attempts', type=int, default=def_max_attempts,
                help="Change the maximum number of query attempts.  Default is %d, use 0 to try forever" % def_max_attempts)
p.add_argument('-u', '--base-url', action='store', dest='base_url', default=def_base_url,
                help="Set the base url of the test site.  Default is '%s'" % def_base_url)
p.add_argument('host_under_test', help='The site (FQDN only) to be tested')

args = p.parse_args()

if args.probe_period and args.probe_period > 1:
    initial_delay = args.probe_period
    retry_delay = args.probe_period
else:
    initial_delay = def_initial_secs
    retry_delay = def_retry_secs

verb("starting")
program_start = time.time()
lab = HttpClient(args.base_url)

ssllabs_status = lab.getmap('info')

current = ssllabs_status.get(u'currentAssessments')
capacity = ssllabs_status.get(u'maxAssessments')
version = ssllabs_status.get(u'engineVersion')
if current > 1:
    info("%s version %s, current assessments %s of %s", args.base_url, version, current, capacity)
else:
    verb("%s version %s, current assessments %s of %s", args.base_url, version, current, capacity)

if current is None or capacity is None:
    warn("Response did not include capacity info, pressing on regardless")
    load = 0
else:
    load = current * 100 / capacity
if load > 60:
    fatal("Excessive load on %s, won't schedule an assessment of '%s'", args.base_url, args.host_under_test)

query = {'host': args.host_under_test, 'all': 'done'}
if args.publish:
    query['publish'] = 'on'
initial_query = query.copy()
if args.force:
    initial_query['startNew'] = 'on'

attempts = 1
delay = initial_delay
state = lab.getmap('analyze', initial_query)
duration = get_duration(state)
status = state.get('status')

verb("Initial SSLlabs status for host '%s' is '%s'", args.host_under_test, status)
while status != 'READY' and status != 'ERROR':
    verb("Sleeping for %d sec%s", delay, '' if delay == 1 else '')
    time.sleep(delay)
    delay = retry_delay
    state = lab.getmap('analyze', query)
    duration = get_duration(state)
    status = state.get('status')
    attempts += 1
    if args.max_attempts and attempts > args.max_attempts:
        fatal("Exceeded maximum %d status query attempts", args.max_attempts)

if args.last_assessment_file:
    try:
        with open(args.last_assessment_file, 'w') as f:
            f.write(json.dumps(state, indent=4))
    except Exception as e:
        warn("Could not save last assessment -- %s", e)
if status != 'READY':
    fatal("It failed")

max_grade = canonical_grade('A+')
passing_grade_num = canonical_grade(args.passing_grade)
if 'endpoints' not in state:
    fatal("READY response included no 'endpoints'")
ep_pos = 0
min_grade = max_grade
grade = None
has_warnings = False
for ep in state['endpoints']:
    ep_pos += 1
    this_grade = ep.get('grade')
    this_warn = ep.get('hasWarnings')
    if this_warn is None:
        warn("Missing 'hasWarnings' in assessment endpoint %d", ep_pos - 1)
    elif this_warn:
        has_warnings = True
    if this_grade is None:
        warn("Missing grade in assessment endpoint %d", ep_pos - 1)
        continue
    grade_num = canonical_grade(this_grade)
    if grade_num <= min_grade:
        min_grade = grade_num
        grade = this_grade
if not grade:
    fatal("Could not determine any grade for '%s'", args.host_under_test)
if grade_num < passing_grade_num:
    fatal("For '%s', the assessment returned a failing grade of '%s'", args.host_under_test, grade)
test_age_mins = get_age(state) / 60.0
if test_age_mins < 2:
    test_age_mins = None
verb("Total execution time: %.1f secs%s",
        time.time() - program_start, '' if test_age_mins is None else ", original test ran %.0f mins ago" % test_age_mins)
if args.report_warnings and has_warnings:
    report_func = warn
    exit_code = 1
else:
    report_func = info
    exit_code = 0
report_func("Host '%s' received grade '%s'%s%s%s",
                args.host_under_test, grade,
                ' with WARNINGS' if has_warnings else '',
                '' if duration is None else ', test ran for %.1f secs' % duration,
                '' if test_age_mins is None else ", %.0f mins ago" % test_age_mins)
sys.exit(exit_code)
