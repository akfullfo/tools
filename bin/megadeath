#!/usr/bin/env python
# ________________________________________________________________________
#
#  Copyright (C) 2014 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

__doc__ = """
Probes for status of an LSI MegaRAID controller using "MegaCLI64" and reports any
change in status to stderr.  Changes are also logged to syslog.

It is intended to be run via cron -- status changes are sent by email.
"""

import sys, os, subprocess, json
import logging
import logging.handlers

name = 'megadeath'

state_file = '/var/local/' + name + '/state.json'

def report(fmt, *fargs):
	msg = fmt.rstrip() % fargs
	log.warning("%s", msg)
	print msg

def read_item(state, section, line):
	if line.find(':') < 0:
		return
	(tag, val) = line.split(':')
	tag = tag.strip()
	if tag == '':
		return
	state[section][tag] = val.strip()

def read_count(state, section, line):
	if line.find(':') < 0:
		return
	(tag, val) = line.split(':')
	tag = tag.strip()
	if tag == '':
		return
	state[section][tag] = int(val.strip())

try:
	log_fmt = '%(name)s[%(process)d]: %(levelname)s - %(message).1000s'
	log = logging.getLogger(name)
	loghandler = logging.handlers.SysLogHandler("/dev/log")
	#loghandler = logging.StreamHandler()
	loghandler.setFormatter(logging.Formatter(log_fmt))
	log.addHandler(loghandler)
	log.setLevel(logging.INFO)
except Exception as e:
	report("Failed to set up logging -- %s", str(e))
	sys.exit(2)

log.debug("Starting")

try:
	p = subprocess.Popen(['MegaCli64', '-AdpAllInfo', '-aALL'],
				executable='/opt/MegaRAID/MegaCli/MegaCli64',
				stdout=subprocess.PIPE,
				stderr=subprocess.PIPE)
	(out, err) = p.communicate()
	code = p.wait()
except Exception as e:
	report("MegaCli64 failed -- %s", str(e))
	sys.exit(2)

if code != 0:
	report("MegaCli64 exited %d -- %s", ((code >> 8) & 0xff, err.strip()))
	sys.exit(2)

section = None
curr_state = {'info': {}, 'devices': {}}
prev_state = {'info': {}, 'devices': {}}
for line in out.splitlines():
	line = line.strip()
	if section and line.strip() == '':
		section = None
		continue
	if line.find('Versions') == 0:
		section = 'info'
		continue
	elif line.find('Device Present') == 0:
		section = 'devices'
		continue
	if section == 'devices':
		read_count(curr_state, section, line)
	elif section:
		read_item(curr_state, section, line)

if os.path.exists(state_file):
	try:
		with open(state_file, 'r') as f:
			state_text = f.read()
		if state_text.strip():
			prev_state = json.loads(state_text)
	except Exception as e:
		report("No previous state file -- %s", str(e), exc_info=True)

product = curr_state['info'].get('Product Name')
if product is None:
	product = 'RAID'

if curr_state == prev_state:
	log.info("No change in %s status", product)
	sys.exit(0)

report("Changes detected in %s state", product)
for s in list(set(curr_state.keys() + prev_state.keys())):
	tags = list(set(curr_state[s].keys() + prev_state[s].keys()))
	for tag in tags:
		prev = prev_state[s].get(tag)
		curr = curr_state[s].get(tag)
		if not prev and not curr:
			continue
		if prev != curr:
			report("  %s: was %s, is now %s",
						tag, str(prev), str(curr))
try:
	with open(state_file, 'w') as f:
		json.dump(curr_state, f, indent=4)
except Exception as e:
	report("Could not save state file -- %s", str(e))
	sys.exit(2)
sys.exit(0)
