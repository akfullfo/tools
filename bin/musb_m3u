#!/usr/bin/env python3
# ________________________________________________________________________
#
#  Copyright (C) 2020 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os
import sys
import re
import argparse

DEF_PATH_PREFIX = os.path.join(os.environ['HOME'], 'Music', 'iTunes', '')
DEF_FROM_EXT = 'm4a'
DEF_TO_EXT = 'mp3'

re_linesplit = re.compile(r'[\r\n]+')

program = os.path.basename(os.path.splitext(sys.argv[0])[0])

p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                            description="""
Reformat m3u playlists as generated by Mac Music (iTunes) for use
in USB music collections as used in Chevy vehicles and probably others.

This converts the OS-9 style CR line termination to NL, converts the
absolute paths to relative paths, and changes the file extension.

The file extension change is needed because even though the Chevy decoder
happily plays aac/m4a files, the file manager does not recognize them.

Files are converted in-situ.
""")

p.add_argument('-n', '--dryrun', action='store_true', help="List files that would change without rewriting them")
p.add_argument('-p', '--path-prefix', action='store', metavar='path', default=DEF_PATH_PREFIX,
                help="Path prefix to remove, default %s" % DEF_PATH_PREFIX)
p.add_argument('-f', '--from-ext', action='store', metavar='ext', default=DEF_FROM_EXT,
                help="Replace this file extension with the --to-ext value, default %r" % DEF_FROM_EXT)
p.add_argument('-t', '--to-ext', action='store', metavar='ext', default=DEF_TO_EXT,
                help="Change the --from-ext extension to this, default %r" % DEF_TO_EXT)
p.add_argument('path', nargs='+', help='Files to change')

args = p.parse_args()

path_prefix_len = len(args.path_prefix)
from_ext_len = len(args.from_ext)

errors = 0


def error(e, path=None):
    global errors
    errors += 1
    if path:
        sys.stderr.write("%s: %s\n" % (path, e))
    else:
        sys.stderr.write("%s\n" % e)


for path in args.path:
    with open(path, "rt") as f:
        as_loaded = f.read()
        data = []
        for line in re_linesplit.split(as_loaded):
            if line.startswith(args.path_prefix):
                line = line[path_prefix_len:]
                if args.from_ext and line.endswith('.' + args.from_ext):
                    line = line[:-from_ext_len] + args.to_ext
            data.append(line)
    as_saved = os.linesep.join(data) + os.linesep
    if as_loaded != as_saved:
        if args.dryrun:
            print("Would rewrite %s" % path)
        else:
            print("Rewriting %s" % path)
            with open(path, "wt") as f:
                f.write(as_saved)
