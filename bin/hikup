#!/usr/bin/env python3
# ________________________________________________________________________
#
#  Copyright (C) 2019 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os
import time
import re
import shutil
import errno
import logging
import logging.handlers
import subprocess
import argparse

from taskforce import watch_files, poll

def_retain = 65
def_idle = 10
def_workdir = '/tmp'
def_basedir = '/cameras'
def_destdir = os.path.join(def_basedir, 'web')

log = None

frame_rate = 5
video_encoding = 'libx264'

#  The smaller the number, the higher the quality and the lower the compressiom
#  See ffmpeg docs for details
#
crf_quality = 30

re_is_daydir_hik = re.compile(r'^(\d{4})_(\d{2})_(\d{2})-\d{4}_\d{2}_\d{2}$')
re_is_daydir_tri = re.compile(r'^(\d{4})-(\d{2})-(\d{2})$')


def parse_args(argv, log=None):
    p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
    Manage jpeg image sequences from Hikvision or Trivision cameras.

    Images arrive via FTP from the camera based on events detected by the camera.

    This waits for file system events and collects the day's images sofar into an MP4
    movie.

    For Hikvision, the camera should have the FTP "Picture Filing Interval" set to 1 Day.
    When the day changes, this will perform a final MP4 run and then start working on the
    new day.
    """
    )

    p.add_argument('-v', '--verbose', action='store_true', help="Verbose logging")
    p.add_argument('-q', '--quiet', action='store_true', help="Quiet logging, errors and warnings only")
    p.add_argument('-e', '--log-stderr', action='store_true', help="Log to stderr, default is syslog")
    p.add_argument('-r', '--retain', action='store', type=int, metavar='days', default=def_retain,
                    help="Days to retain original images, use 0 for forever, default %r days" % def_retain)
    p.add_argument('-R', '--reprocess', action='store', metavar='days',
                    help="Reprocessing to this many days, use 0 for all, or specify a directory.  Implies --force.")
    p.add_argument('-i', '--idle', action='store', type=int, metavar='secs', default=def_idle,
                    help="Delay processing until there have been no events for this period, default %r secs" % def_idle)
    p.add_argument('-d', '--destdir', action='store', metavar='path', default=def_destdir,
                    help="Directory to output generated movies and index, default %r" % def_destdir)
    p.add_argument('-b', '--basedir', action='store', metavar='path', default=def_basedir,
                    help="Base directory containing the camera name, default %r" % def_basedir)
    p.add_argument('-W', '--workdir', action='store', metavar='path', default=def_workdir,
                    help="Work directory containing the camera name, default %r" % def_workdir)
    p.add_argument('-N', '--no-initial', action='store_false', dest='initial',
                    help="Don't perform immediate processing, wait for an event")
    p.add_argument('-1', '--once', action='store_true', help="Exit after initial processing")
    p.add_argument('-f', '--force', action='store_true', help="Regenerate videos even if they appear up-to-date")
    p.add_argument('name', nargs=1, action='store', help="Camera name")

    args = p.parse_args()

    if args.log_stderr:
        log_handler = logging.StreamHandler()
        log_formatter = logging.Formatter(fmt="%(asctime)s %(levelname)s %(message)s")
    else:
        logparams = {}
        for addr in ['/dev/log', '/var/run/log']:
            if os.path.exists(addr):
                logparams['address'] = addr
                break
        log_handler = logging.handlers.SysLogHandler(**logparams)
        log_formatter = logging.Formatter(fmt="%(name)s[%(process)d]: %(levelname)s %(message).1000s")

    if not log:
        log = logging.getLogger()
        log_handler.setFormatter(log_formatter)
        log.addHandler(log_handler)

    if args.verbose:
        log.setLevel(logging.DEBUG)
    elif args.quiet:
        log.setLevel(logging.WARNING)
    else:
        log.setLevel(logging.INFO)

    if args.reprocess:
        args.force = True

    return args, log


def run(cmd):
    try:
        log.debug("Running: %s", cmd)
        start = time.time()
        subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        return time.time() - start
    except subprocess.CalledProcessError as e:
        log.error("%s exited %r, output follows ...", cmd[0], e.returncode)
        for line in e.output.decode('utf-8').splitlines():
            log.error("    %s", line.rstrip())
    except Exception as e:
        log.error("%s failed -- %s", cmd[0], e)
    return None


def newest(dpath, ext=None):
    newest_mtime = None
    newest_path = None
    if not os.path.exists(dpath):
        log.debug("No path %r", dpath)
        return None, None
    if os.path.isdir(dpath):
        for fname in os.listdir(dpath):
            if ext is None or fname.endswith(ext):
                path = os.path.join(dpath, fname)
                mtime = os.path.getmtime(path)
                if newest_mtime is None or newest_mtime < mtime:
                    newest_mtime = mtime
                    newest_path = path
    else:
        newest_mtime = os.path.getmtime(dpath)
        newest_path = dpath

    log.debug("Newest%s in %r is %r (%r)", '' if ext is None else ' ' + str(ext), dpath, newest_path, newest_mtime)
    return newest_mtime, newest_path


def is_daydir(path, match=False):
    if os.path.isdir(path):
        base, dname = os.path.split(path)
        m = re_is_daydir_hik.match(dname)
        if not m:
            m = re_is_daydir_tri.match(os.path.basename(dname))
        if m:
            return m if match else path
    return None


def process(daydir, args, set_latest=False):
    camera = args.name[0]

    camerawork = os.path.join(args.workdir, camera)
    if not os.path.isdir(camerawork):
        os.makedirs(camerawork)
        log.info("Created dir %r", camerawork)

    m = is_daydir(daydir, match=True)
    if not m:
        log.error("Attempt to process non-daydir %r", daydir)
        return
    yr, mo, dy = m.group(1, 2, 3)

    dname = "%s%s" % (yr, mo)
    outcam = os.path.join(args.destdir, camera)
    outdir = os.path.join(outcam, dname)
    if not os.path.isdir(outdir):
        os.makedirs(outdir)
        log.info("Created dir %r", outdir)
    fname = "%s%s%s" % (yr, mo, dy)

    src_mtime, src_path = newest(daydir, ext='.jpg')

    if not src_mtime:
        log.warning("No input files found in %r", daydir)
        return

    outpath = os.path.join(outdir, fname + '.mp4')
    tmppath = os.path.join(outdir, fname + '.tmp')
    workpath = os.path.join(camerawork, 'convert.mp4')
    concpath = os.path.join(camerawork, 'concat.mp4')

    dst_mtime, dst_path = newest(outpath)
    if not args.force:
        if dst_mtime and src_mtime < dst_mtime:
            log.debug("%s is already up-to-date", dst_path)
            return

    for path in (workpath, concpath):
        if os.path.exists(path):
            try:
                os.unlink(path)
                log.info("Removed pre-exisitng file %r", path)
            except Exception as e:
                log.error("Could not remove pre-existing %r, giving up", path)
                return

    start_t = 0
    last_run = os.path.join(camerawork, '.lastrun')
    last_tmp = last_run + '.tmp'
    list_file = os.path.join(camerawork, 'files.txt')
    try:
        with open(last_tmp, 'w') as f:
            pass
    except Exception as e:
        log.error("Could not mark this run -- %s", e)

    if args.reprocess is None:
        try:
            start_t = os.path.getmtime(last_run)
        except:
            log.info("No previous run")
            pass

    paths = []
    for fname in os.listdir(daydir):
        if fname.endswith('.jpg'):
            path = os.path.join(daydir, fname)
            if os.path.getmtime(path) > start_t:
                paths.append(path)
    if paths:
        os.rename(last_tmp, last_run)
    else:
        try:
            os.unlink(last_tmp)
        except:
            pass
        log.info("No new files to process")
        return

    log.info("Processing %d jpgs to mp4 from %s", len(paths), daydir)
    with open(list_file, 'w') as f:
        for path in sorted(paths):
            f.write("file '%s'\n" % os.path.abspath(path))

    cmd = ['ffmpeg',
            '-loglevel', 'error',
            '-safe', '0',
            '-f', 'concat',
            '-i', list_file,
            '-r', str(frame_rate),
            '-c:v', str(video_encoding),
            '-crf', str(crf_quality),
            workpath]
    delta = run(cmd)
    if delta is None:
        return
    log.info("%s jpg to mp4 completed in %.1f secs, output: %s", cmd[0], delta, workpath)

    if not args.reprocess and os.path.exists(outpath):
        with open(list_file, 'w') as f:
            f.write("file '%s'\n" % outpath)
            f.write("file '%s'\n" % workpath)
        cmd = ['ffmpeg',
                '-loglevel', 'error',
                '-safe', '0',
                '-f', 'concat',
                '-i', list_file,
                '-codec', 'copy',
                concpath]
        delta = run(cmd)
        if delta is None:
            return
        log.info("%s mp4 concat completed in %.1f secs, output: %s", cmd[0], delta, concpath)
        run(['mv', concpath, tmppath])
        try:
            os.unlink(workpath)
        except:
            pass
    else:
        run(['mv', workpath, tmppath])
    os.rename(tmppath, outpath)

    if set_latest:
        latest = os.path.join(outcam, 'latest.mp4')
        if os.path.exists(latest):
            try:
                os.unlink(latest)
            except Exception as e:
                log.warning("Failed to remove exisiting %r -- %s", latest, e)
                return
        try:
            os.symlink(outpath, latest)
        except Exception as e:
            log.warning("Failed to create new latest %r -- %s", latest, e)


def get_daydirs(base):
    return sorted(path for path in map(lambda x: is_daydir(os.path.join(base, x)), os.listdir(base)) if path is not None)


def scan(cameradir, args):
    daydirs = get_daydirs(cameradir)

    if args.retain > 0:
        while len(daydirs) > args.retain:
            path = daydirs.pop(0)
            try:
                shutil.rmtree(path)
            except Exception as e:
                log.warning("Failed to remove expired path %r -- %s", path, e)
    if args.reprocess:
        if os.path.isdir(args.reprocess):
            procdirs = [args.reprocess]
        else:
            days = int(args.reprocess)
            if days > 0 and len(daydirs) > days:
                procdirs = daydirs[-days:]
                log.debug("Reprocess limited to %r: %r", days, procdirs)
    else:
        procdirs = daydirs[-1:]
    for path in procdirs:
        process(path, args, set_latest=(path == daydirs[-1]))


def watch(camera, cameradir, args):
    exit_code = 0
    try:
        if args.initial:
            scan(cameradir, args)
            if args.once:
                log.info("Exiting after initial scan due to --once")
                exit(0)
        snoop = watch_files.watch(log=log, timeout=args.idle)
        snoop.add([cameradir] + get_daydirs(cameradir))
        pset = poll.poll()
        pset.register(snoop, poll.POLLIN)
        restart = False
        while not restart:
            try:
                evlist = pset.poll()
            except OSError as e:
                log.info("poll() exception -- %s", e)
                if e.errno != errno.EINTR:
                    raise e
            if evlist:
                log.info('Change detected, starting %r sec idle delay ...', args.idle)
                for path in snoop.get():
                    log.info('    %s', path)
                    if path == cameradir:
                        log.info("Change detected in %r, restarting after next scan in case it is a new day", cameradir)
                        restart = True
                scan(cameradir, args)
            else:
                log.warning("Unexpected poll() timeout, restarting")
                restart = True
    except Exception as e:
        log.error("Unexpected exception -- %s", e, exc_info=True)
        exit_code = 2
    if args.once:
        log.info("Exiting due to --once")
        exit(exit_code)
    time.sleep(2)


def main(argv=None, ilog=None):
    global log
    args, log = parse_args(argv, log=ilog)

    camera = args.name[0]
    camerabase = os.path.join(args.basedir, camera)
    if not os.path.isdir(camerabase):
        log.error("%s is not a directory", camerabase)
        exit(2)

    log.info("Starting in %s ...", camerabase)
    while True:
        watch(camera, camerabase, args)


main()
