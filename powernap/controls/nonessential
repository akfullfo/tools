#!/usr/bin/env python
# ________________________________________________________________________
#
#  Copyright (C) 2020 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os
import sys
import json
import socket
import argparse
import subprocess
try:
    import wakeonlan
except ImportError:
    pass

DEF_BASE_DIR = os.path.dirname(os.path.dirname(sys.argv[0]))

DEF_TIMEOUT = 10

#  ping args used to probe host is up
#
PING_DEADLINE = 1
PING_COUNT = 2
PING_INTERVAL = 0.1


def parse_args(argv):
    config_file = os.path.join(DEF_BASE_DIR, 'config', 'nonessential.json')
    poweroff_key = os.path.join(DEF_BASE_DIR, '.ssh', 'id_rsa_poweroff')
    virsh_key = os.path.join(DEF_BASE_DIR, '.ssh', 'id_rsa_virshops')

    p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
    Issue poweroff and wake-on-lan commands to control servers
    running non-estential functions.

    These are started on transitions to cost level below the host threshold
    and stopped otherwise.

    Note that the special 'id_rsa_poweroff' key must be set up in the
    remote authorized_keys file to run the 'poweroff' command.  This
    avoids granting powernap full root access.
    """
    )
    p.add_argument('-C', '--config-file', action='store', metavar='path', default=config_file,
                    help="Configuration in JSON format, default %r" % config_file)
    p.add_argument('-i', '--poweroff-key', action='store', default=poweroff_key, metavar='path',
                    help="Ssh key file allowing remote poweroff, default %s" % poweroff_key)
    p.add_argument('-V', '--virsh-key', action='store', default=virsh_key, metavar='path',
                    help="Ssh key file allowing remote KVM start and shutdown, default %s" % virsh_key)
    p.add_argument('-t', '--timeout', action='store', type=int, default=DEF_TIMEOUT, metavar='secs',
                    help="Connect timeout for ssh, default %r" % DEF_TIMEOUT)
    p.add_argument('-n', '--dryrun', action='store_true', help="Print any action needed instead of running it")
    p.add_argument('--force-down', action='store_true', help="Force the 'down' behavior except if operation is disabled")
    p.add_argument('--host', action='store', metavar='internal_structure', help=argparse.SUPPRESS)
    p.add_argument('prev_level', type=int, help="The previous cost level")
    p.add_argument('next_level', type=int, help="The next cost level")

    args = p.parse_args()

    try:
        with open(args.config_file, "rt") as f:
            config = json.load(f)
        for tag, info in config.items():
            setattr(args, tag, info)
    except Exception as e:
        raise argparse.ArgumentTypeError("Config error: %s" % e)

    if not os.path.exists(args.poweroff_key):
        raise argparse.ArgumentTypeError("Dedicated power-off ssh key file %r is missing" % args.poweroff_key)
    if not os.path.exists(args.virsh_key):
        raise argparse.ArgumentTypeError("Dedicated virsh ops ssh key file %r is missing" % args.virsh_key)
    return args


def host_is_up(host, info):
    """
        Best module for ping processing is "pythonping" but it doesn't work on MacOS,
        so easiest is to use the "ping" command, but it also has variations:

            ping -c 2 -i 0.1 -n -q -w 1 192.168.11.50     # sys.platform.startswith('linux')

            ping -c 2 -i 0.1 -n -q -t 1 192.168.11.50     # sys.platform.startswith('darwin') or sys.platform.startswith('freebsd')

        exits:
            Linux:
                0: success
                1: no response
                2: command error
            MacOS/FreeBSD:
                0: success
                2: no response
               >2: command error

        Note that MacOS doesn't allow non-privileged uses to use an interval less than 0.1 secs.
    """

    #  Resolve the hostname.  If that doesn't work, use the config value if
    #  available, otherwise give up and report host is down.
    #
    try:
        socket.inet_aton(host)
        ip_addr = host
    except socket.error:
        try:
            ip_addr = socket.gethostbyname(host)
        except socket.error:
            ip_addr = info.get('ip')
    if sys.platform.startswith('linux'):
        deadline = ['-w', str(PING_DEADLINE)]
        timeout_return = 1
    elif sys.platform.startswith('darwin') or sys.platform.startswith('freebsd'):
        deadline = ['-t', str(PING_DEADLINE)]
        timeout_return = 2
    else:
        raise Exception("Platform %r is unsupported for host-up test" % sys.platform)

    cmd = ['ping', '-n', '-q', '-c', str(PING_COUNT), '-i', str(PING_INTERVAL)] + deadline + [ip_addr]
    try:
        subprocess.check_output(cmd, stderr=subprocess.STDOUT, universal_newlines=True)
        return True
    except subprocess.CalledProcessError as e:
        if e.returncode == timeout_return:
            return False
        else:
            errtext = e.output.strip()
            raise Exception("%s host 'up' check failed -- %s" % (host, errtext if errtext else e))


def remote_cmd(args, keyfile, host, rem_cmd, name='poweroff'):
    ssh_args = ['ssh',
                    '-2',
                    '-T',
                    '-x',
                    '-n',
                    '-o', 'PreferredAuthentications=publickey',
                    '-o', 'ConnectTimeout=%d' % args.timeout,
                ]
    cmd = ssh_args + ['-i', keyfile] + ['root@' + host] + rem_cmd
    try:
        subprocess.check_output(cmd, stderr=subprocess.STDOUT, universal_newlines=True)
        if args.force_down:
            sys.stderr.write("Issued %s to %r due to --force-down\n" % (name, host))
        else:
            sys.stderr.write("Issued %s to %r due to cost level %r\n" % (name, host, args.next_level))
        return True
    except subprocess.CalledProcessError as e:
        errtext = e.output.strip()
        if 'closed by remote host' in errtext:
            sys.stderr.write("Issued %s to %r due to cost level %r\n" % (name, host, args.next_level))
        else:
            sys.stderr.write("%s %s failed -- %s\n" % (host, name, errtext if errtext else e))
    except Exception as e:
        sys.stderr.write("Error with %s %s -- %s\n" % (host, name, e))
    return False


def main(argv=None):
    args = parse_args(argv)

    is_check = args.prev_level == args.next_level

    errors = 0
    for host, info in sorted(args.host.items()):
        if args.force_down:
            expected = False
        else:
            expected = args.next_level < info['threshold']

        host_up = host_is_up(host, info)

        if expected == host_up:
            if args.dryrun:
                print("%s: Level %d, threshold %d, no change needed" % (host, args.next_level, info['threshold']))
            continue

        #  The disabled flag only applies to shutdowns.  This allows the normal
        #  bringup to be used to recover from a power failure.
        #
        if not expected and info.get("disabled"):
            continue

        if is_check:
            sys.stderr.write("%s should be %s, attempting correction\n" % (host, 'up' if expected else 'down'))
        if args.dryrun:
            print("%s: Level %d, threshold %d, would %s" %
                    (host, args.next_level, info['threshold'], 'start' if expected else 'stop'))
        elif expected:
            kvm_host = info.get("kvm")
            if kvm_host:
                cmd = 'start ' + host
                if not remote_cmd(args, args.virsh_key, kvm_host, [cmd], name=cmd):
                    errors += 1
            else:
                try:
                    wakeonlan.send_magic_packet(info['mac'])
                    sys.stderr.write("Issued wake-on-lan to %r (%s) due to cost level %r\n" % (host, info['mac'], args.next_level))
                except Exception as e:
                    sys.stderr.write("%s wake-on-lan failed -- %s\n" % (host, e))
                    errors += 1
        else:
            kvm_host = info.get("kvm")
            if kvm_host:
                cmd = 'shutdown ' + host
                if not remote_cmd(args, args.virsh_key, kvm_host, [cmd], name=cmd):
                    errors += 1
            else:
                if not remote_cmd(args, args.poweroff_key, host, ['true']):
                    errors += 1

    return errors


exit(main())
