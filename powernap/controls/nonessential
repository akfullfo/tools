#!/usr/bin/env python
# ________________________________________________________________________
#
#  Copyright (C) 2020 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os
import sys
import json
import wakeonlan
import argparse
import subprocess

DEF_BASE_DIR = os.path.dirname(os.path.dirname(sys.argv[0]))

DEF_HOSTS = {
        "dubious": "74:d0:2b:0d:27:e6",
        "host-tree": "70:54:d2:90:69:03",
        "host-twig": "4c:72:b9:99:39:aa",
        "host-trinket": "70:54:d2:90:69:ee",
    }

DEF_TIMEOUT = 10


def parse_args(argv):
    config_file = os.path.join(DEF_BASE_DIR, 'config', 'nonessential.json')
    ssh_keyfile = os.path.join(DEF_BASE_DIR, '.ssh', 'id_rsa_poweroff')

    p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
    Issue poweroff and wake-on-lan commands to control servers
    running non-estential functions.

    These is started on transitions to cost level below 2
    and stopped on transitions to cost level above 2.
    """
    )
    p.add_argument('-C', '--config-file', action='store', metavar='path', default=config_file,
                    help="Configuration in JSON format, default %r" % config_file)
    p.add_argument('-i', '--ssh-keyfile', action='store', default=ssh_keyfile, metavar='path',
                    help="Ssh key file allowing remote poweroff, default %s" % ssh_keyfile)
    p.add_argument('-t', '--timeout', action='store', type=int, default=DEF_TIMEOUT, metavar='secs',
                    help="Connect timeout for ssh, default %r" % DEF_TIMEOUT)
    p.add_argument('--host', action='store', metavar='internal_structure', help=argparse.SUPPRESS)
    p.add_argument('prev_level', type=int, help="The previous cost level")
    p.add_argument('next_level', type=int, help="The next cost level")

    args = p.parse_args()

    try:
        with open(args.config_file, "rt") as f:
            config = json.load(f)
        for tag, info in config.items():
            setattr(args, tag, info)
    except Exception as e:
        raise argparse.ArgumentTypeError("Config error: %s" % e)

    if not os.path.exists(args.ssh_keyfile):
        raise argparse.ArgumentTypeError("Dedicated power-off ssh key file %r is missing" % args.ssh_keyfile)
    return args


def main(argv=None):
    args = parse_args(argv)

    is_check = args.prev_level == args.next_level

    ssh_args = ['ssh',
                    '-2',
                    '-T',
                    '-x',
                    '-n',
                    '-o', 'PreferredAuthentications=publickey',
                    '-o', 'ConnectTimeout=%d' % args.timeout,
                ]
    ssh_args += ['-i', args.ssh_keyfile]

    for host, info in sorted(args.host.items()):
        if not is_check:
            print("%s: Level %d, threshold %d, would %s" %
                    (host, args.next_level, info['threshold'], 'start' if args.next_level < info['threshold'] else 'stop'))
        continue
        cmd = ssh_args + [host, 'true']
        try:
            subprocess.check_output(cmd, stderr=subprocess.STDOUT, universal_newlines=True).strip()
        except subprocess.CalledProcessError as e:
            status = e.output.strip()
            if status != 'inactive':
                sys.stderr.write("%s status check failed -- %s\n" % (host, status if status else e))
                continue
        except Exception as e:
            sys.stderr.write("%s status check failed -- %s\n" % (host, e))
            continue
    return 0


exit(main())
