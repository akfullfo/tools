#!/usr/bin/env python
# ________________________________________________________________________
#
#  Copyright (C) 2020 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import sys
import time
import json
import os.path
import argparse
import subprocess

DEF_BASE_DIR = os.path.dirname(os.path.dirname(sys.argv[0]))

DEF_TIMEOUT = 10

DEF_TRANSITION_LEVEL = 1

CMD_STATUS = 'systemctl is-active boinc-client'
CMD_STOP = 'systemctl stop boinc-client'
CMD_START = 'systemctl start boinc-client'
CMD_RESET = 'systemctl restart boinc-client'

#  Check mode is:  systemctl is-active boinc-client
#  Answers: <= 0 should be "active"
#           >= 1 should be "inactive"


def parse_args(argv):
    config_file = os.path.join(DEF_BASE_DIR, 'config', 'boinc.json')
    ssh_keyfile = os.path.join(DEF_BASE_DIR, '.ssh', 'id_rsa')

    p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
    Issue remote controls to boinc servers.

    The boinc-client is started on cost levels below the
    transition level and stopped on cost levels equal or
    above it.
    """
    )
    p.add_argument('-T', '--transition-level', action='store', type=int, metavar='num', default=DEF_TRANSITION_LEVEL,
                    help="Cost level when processing should transition from active to inactive, default %r" % DEF_TRANSITION_LEVEL)
    p.add_argument('-C', '--config-file', action='store', metavar='path', default=config_file,
                    help="Configuration in JSON format, default %r" % config_file)
    p.add_argument('-H', '--host', action='append', metavar='addr',
                    help="Remote boinc host, default from config")
    p.add_argument('-i', '--ssh_keyfile', action='store', default=ssh_keyfile, metavar='path',
                    help="Alternate key file to use if it exists, default %s" % ssh_keyfile)
    p.add_argument('--force-down', action='store_true', help="Force the 'down' behavior except if operation is disabled")
    p.add_argument('-t', '--timeout', action='store', type=int, default=DEF_TIMEOUT, metavar='secs',
                    help="Connect timeout for ssh, default %r" % DEF_TIMEOUT)
    p.add_argument('prev_level', type=int, help="The previous cost level")
    p.add_argument('next_level', type=int, help="The next cost level")

    args = p.parse_args()
    config = {}
    try:
        with open(args.config_file, "rt") as f:
            config = json.load(f)
        for tag, info in config.items():
            setattr(args, tag, info)
    except Exception as e:
        raise argparse.ArgumentTypeError("Config error: %s" % e)
    if not args.host:
        raise argparse.ArgumentTypeError("No hosts provided")
    return args


def host_cmd(args, host, cmd):
    ssh_args = ['ssh',
                    '-2',
                    '-T',
                    '-x',
                    '-n',
                    '-o', 'PreferredAuthentications=publickey',
                    '-o', 'ConnectTimeout=%d' % args.timeout,
                ]
    if os.path.isfile(args.ssh_keyfile):
        ssh_args += ['-i', args.ssh_keyfile]
    ssh_cmd = ssh_args + [host, cmd]
    try:
        status = subprocess.check_output(ssh_cmd, stderr=subprocess.STDOUT, universal_newlines=True).strip()
    except subprocess.CalledProcessError as e:
        status = e.output.strip()
        if not status:
            status = str(e)
    except Exception as e:
        status = str(e)
    return status


def main(argv=None):
    args = parse_args(argv)

    if args.force_down:
        expected = 'inactive'
    elif args.next_level < args.transition_level:
        expected = 'active'
    else:
        expected = 'inactive'
    is_check = args.prev_level == args.next_level

    for host in args.host:
        status = host_cmd(args, host, CMD_STATUS)
        if status == 'failed':
            sys.stderr.write("%s status is 'failed' -- attempting reset\n" % host)
            host_cmd(args, host, CMD_RESET)
            time.sleep(1)
            status = host_cmd(args, host, CMD_STATUS)
        if status not in ('active', 'inactive'):
            sys.stderr.write("%s status check failed -- %s\n" % (host, status))
        elif status != expected:
            if is_check:
                sys.stderr.write("%s found %s when %s expected, attempting correction\n" % (host, status, expected))
            result = host_cmd(args, host, CMD_STOP if expected == 'inactive' else CMD_START)
            if result:
                sys.stderr.write("%s update failed -- %s\n" % (host, result))
            else:
                sys.stderr.write("%s changed from %s to %s\n" % (host, status, expected))
    return 0


exit(main())
